name: Create release

env:
  # Stop wasting time caching packages
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending usage data to Microsoft
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  PROJECT_PATH: 'src/GShark/GShark.csproj'
  PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}/output
  NUGET_SOURCE_URL: 'https://api.nuget.org/v3/index.json'

on:
  workflow_dispatch:
  pull_request:
    types: [closed]
    branches:
      - develop

jobs:
  build:
    if: github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-20.04

    steps:
      - name: üõé Checkout repo
        uses: actions/checkout@v2
        with: 
          fetch-depth: 0

      - name: üöß Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.x

      - name: ‚öôÔ∏è Get previous tag.
        id: version
        run: |
          lastTag=`git tag -l --sort=-creatordate --format='%(refname:short)' | head -n 1`
          echo "::set-output name=tag::$lastTag"

      - name: ‚öôÔ∏è Bump if alpha.
        id: bump-with-alpha
        uses: actions/github-script@v3
        with:
          result-encoding: string
          script: |
                const incoming = "${{steps.version.outputs.tag}}"
                console.log("Incoming Tag: " + incoming)
                if(incoming.includes('alpha')) {
                  const oldNum = incoming.match(/alpha[.]*(\d+)/)[1]
                  const newNum = parseInt(oldNum)+1
                  const newTag = incoming.replace(/alpha.*\d+/, `alpha.${newNum}`)
                  console.log("New Tag: " + newTag)
                  return newTag
                }
                else {
                  const newTag =incoming +'-alpha.0'
                  console.log("New Tag: " + newTag)
                  return newTag
                }
      
      - name: üîß Restore nuget with dotnet
        run: dotnet restore ${{ env.PROJECT_PATH }}
      
      - name: üß± Build project
        run: dotnet build ${{ env.PROJECT_PATH }} --no-restore --configuration Release -p:Version=${{ steps.bump-with-alpha.outputs.result }}
        
      - name: üì¶ Create the package
        run: dotnet pack ${{ env.PROJECT_PATH }} --no-restore --no-build --configuration Release -p:PackageVersion=${{ steps.bump-with-alpha.outputs.result }} --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }}
        
      - name: üöÄ Publish the package
        run: dotnet nuget push ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg --skip-duplicate -k ${{ secrets.NUGET_API_KEY }} -src ${{ env.NUGET_SOURCE_URL }}

      - name: üìò Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump-with-alpha.outputs.result }}
          release_name: ${{ steps.bump-with-alpha.outputs.result }}
          body: |
            ### PR Title
            ${{ github.event.pull_request.title }}
            
            ${{ github.event.pull_request.body }}
          draft: false
          prerelease: false
